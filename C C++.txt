クラスの記法は構造体に似ている．
ヘッダファイルにクラス宣言して定義はcppファイルに書く感じ
抽象クラスとかいろいろjavaと違う


インスタンス時、実体(？)のインスタンスとポインタ型のインスタンスに分かれる。
実体インスタンス… Class temp();
ポインタインスタンス… Clas *temp = new Class();
使い分けはよくわからんけど実体インスタンスのほうが多い？ポインタ渡しはプリミティブのときみたいに変数のスコープを広げる(多分表現が違う)につかうイメージ


エラー：デフォルトコンストラクタが設定されていませんの解決案
デフォルトコンストラクタClass(){}を明示してオーバードする
メソッドに引数として渡すとき参照渡しとポインタ渡しと使い分け
どちらも呼び出し元の変数を変更することができる。
参照渡し…オブジェクトの値を変更しないときに用いる。
ポインタ渡し…オブジェクトの値を変更するときに用いる。
文法上参照渡しだと呼び出し元から値が変更することがわかりにくい(呼び出し元からでは値渡しか参照渡しかわからない)
そのため値を変更する場合、ポインタ渡しを使う。ついで参照渡しするなら値が変更されないものとしてconstをつける。


関数ポインタ:引数が同じじゃないといけない
宣言:戻り値 (*関数名)(引数郡)  括弧つけるアスタリスクがどこにつくかわからないかから
代入:関数名を入れる
呼び出し:いつもどおり
メンバ関数のとき：
宣言:戻り値 (クラス名::*関数名)(引数郡) thisも指定しないといけないから
代入:クラス名::関数名を入れる
呼び出し:(this->*関数名)()